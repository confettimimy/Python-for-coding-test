''' • DFS 구현 시 스택 자료구조를 이용 -> 실제 구현은 재귀함수를 이용
    • BFS 구현 시 큐 자료구조를 이용 '''
# DFS(깊이 우선 탐색): 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘


# DFS 메서드 정의
def dfs(graph, v, visited):
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, end=' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)
# DFS는 스택을 이용하는 알고리즘이기 때문에 실제 구현은 재귀 함수를 이용했을 때 매우 간결하게 구현할 수 있다.
# 가장 마지막에 호출된 함수가 가장 먼저 처리가 됨
# 재귀함수의 동작 원리가 스택과 유사해 스택 대신 재귀함수를 이용하는 것이 일반적으로 더 많이 사용되고 간결하게 구현 가능.


# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
    [], # 0번 인덱스는 안쓰도록 무시, 1~8부터 차례대로 채움
    [2, 3, 8], # 노드1과 연결돼 있는 노드들
    [1, 7], # 노드2에 연결돼 있는 노드들
    [1, 4, 5], # 노드3에 연결돼 있는 노드들
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]


# 각 노드가 방문된 정보를 리스트 자료형으로 표현(별도의 1차원 리스트 생성)
# 방문이 되었는지 안되었는지의 체크를 위함
# 노드가 8개인데 0번 노드는 없기 때문에 총 9개의 공간을 넣음
visited = [False] * 9
# [False, False, False, False, False, False, False, False, False]


# 정의된 DFS 함수 호출
dfs(graph, 1, visited)
